server.port=8098

#datasource
#This is not a production recommended approach, like directly mentioning your database credentials, 
#always your DevOps team. They will try to inject these credentials as an environmental variables through the 
#CI/CD pipelines build tools like Jenkins
spring.datasource.url=jdbc:postgresql://localhost:5432/springdb
spring.datasource.username=springuser
spring.datasource.password=springpass
spring.datasource.driver-class-name=org.postgresql.Driver

spring.servlet.multipart.enabled=true

spring.jpa.show-sql=true
spring.jpa.generate-ddl=false
spring.jpa.hibernate.ddl-auto=none

#SSL
server.ssl.key-store-type=PKCS12
server.ssl.key-store=classpath:keystore/apisecurity.p12
server.ssl.key-store-password=apisecurity
server.ssl.key-alias=apisecurity
server.ssl.enabled=false


#liquibase
spring.liquibase.change-log=classpath:db/changelog/db.changelog-master.xml

logging.pattern.console="%clr(%d{HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:%5p}) %clr(---){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:%wEx}"